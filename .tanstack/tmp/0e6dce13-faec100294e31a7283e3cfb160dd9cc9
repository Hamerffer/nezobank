/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as appRouteRouteImport } from './routes/(app)/route'
import { Route as AuthLayoutRouteImport } from './routes/Auth/_layout'

const AuthRouteImport = createFileRoute('/Auth')()
const appIndexLazyRouteImport = createFileRoute('/(app)/')()
const authSignupLazyRouteImport = createFileRoute('/(auth)/signup')()
const authLoginLazyRouteImport = createFileRoute('/(auth)/login')()
const appSpotLazyRouteImport = createFileRoute('/(app)/spot')()
const appServicesLazyRouteImport = createFileRoute('/(app)/services')()
const appOneclickbuyLazyRouteImport = createFileRoute('/(app)/oneclickbuy')()
const appContactLazyRouteImport = createFileRoute('/(app)/contact')()
const appAboutLazyRouteImport = createFileRoute('/(app)/about')()
const appP2pIndexLazyRouteImport = createFileRoute('/(app)/p2p/')()
const appP2pIdLazyRouteImport = createFileRoute('/(app)/p2p/$id')()

const AuthRoute = AuthRouteImport.update({
  id: '/Auth',
  path: '/Auth',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const appRouteRoute = appRouteRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const appIndexLazyRoute = appIndexLazyRouteImport
  .update({
    id: '/',
    path: '/',
    getParentRoute: () => appRouteRoute,
  } as any)
  .lazy(() => import('./routes/(app)/index.lazy').then((d) => d.Route))
const authSignupLazyRoute = authSignupLazyRouteImport
  .update({
    id: '/signup',
    path: '/signup',
    getParentRoute: () => authRouteRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/signup.lazy').then((d) => d.Route))
const authLoginLazyRoute = authLoginLazyRouteImport
  .update({
    id: '/login',
    path: '/login',
    getParentRoute: () => authRouteRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/login.lazy').then((d) => d.Route))
const appSpotLazyRoute = appSpotLazyRouteImport
  .update({
    id: '/spot',
    path: '/spot',
    getParentRoute: () => appRouteRoute,
  } as any)
  .lazy(() => import('./routes/(app)/spot.lazy').then((d) => d.Route))
const appServicesLazyRoute = appServicesLazyRouteImport
  .update({
    id: '/services',
    path: '/services',
    getParentRoute: () => appRouteRoute,
  } as any)
  .lazy(() => import('./routes/(app)/services.lazy').then((d) => d.Route))
const appOneclickbuyLazyRoute = appOneclickbuyLazyRouteImport
  .update({
    id: '/oneclickbuy',
    path: '/oneclickbuy',
    getParentRoute: () => appRouteRoute,
  } as any)
  .lazy(() => import('./routes/(app)/oneclickbuy.lazy').then((d) => d.Route))
const appContactLazyRoute = appContactLazyRouteImport
  .update({
    id: '/contact',
    path: '/contact',
    getParentRoute: () => appRouteRoute,
  } as any)
  .lazy(() => import('./routes/(app)/contact.lazy').then((d) => d.Route))
const appAboutLazyRoute = appAboutLazyRouteImport
  .update({
    id: '/about',
    path: '/about',
    getParentRoute: () => appRouteRoute,
  } as any)
  .lazy(() => import('./routes/(app)/about.lazy').then((d) => d.Route))
const AuthLayoutRoute = AuthLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => AuthRoute,
} as any)
const appP2pIndexLazyRoute = appP2pIndexLazyRouteImport
  .update({
    id: '/p2p/',
    path: '/p2p/',
    getParentRoute: () => appRouteRoute,
  } as any)
  .lazy(() => import('./routes/(app)/p2p/index.lazy').then((d) => d.Route))
const appP2pIdLazyRoute = appP2pIdLazyRouteImport
  .update({
    id: '/p2p/$id',
    path: '/p2p/$id',
    getParentRoute: () => appRouteRoute,
  } as any)
  .lazy(() => import('./routes/(app)/p2p/$id.lazy').then((d) => d.Route))

export interface FileRoutesByFullPath {
  '/': typeof appIndexLazyRoute
  '/Auth': typeof AuthLayoutRoute
  '/about': typeof appAboutLazyRoute
  '/contact': typeof appContactLazyRoute
  '/oneclickbuy': typeof appOneclickbuyLazyRoute
  '/services': typeof appServicesLazyRoute
  '/spot': typeof appSpotLazyRoute
  '/login': typeof authLoginLazyRoute
  '/signup': typeof authSignupLazyRoute
  '/p2p/$id': typeof appP2pIdLazyRoute
  '/p2p': typeof appP2pIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof appIndexLazyRoute
  '/Auth': typeof AuthLayoutRoute
  '/about': typeof appAboutLazyRoute
  '/contact': typeof appContactLazyRoute
  '/oneclickbuy': typeof appOneclickbuyLazyRoute
  '/services': typeof appServicesLazyRoute
  '/spot': typeof appSpotLazyRoute
  '/login': typeof authLoginLazyRoute
  '/signup': typeof authSignupLazyRoute
  '/p2p/$id': typeof appP2pIdLazyRoute
  '/p2p': typeof appP2pIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(app)': typeof appRouteRouteWithChildren
  '/(auth)': typeof authRouteRouteWithChildren
  '/Auth': typeof AuthRouteWithChildren
  '/Auth/_layout': typeof AuthLayoutRoute
  '/(app)/about': typeof appAboutLazyRoute
  '/(app)/contact': typeof appContactLazyRoute
  '/(app)/oneclickbuy': typeof appOneclickbuyLazyRoute
  '/(app)/services': typeof appServicesLazyRoute
  '/(app)/spot': typeof appSpotLazyRoute
  '/(auth)/login': typeof authLoginLazyRoute
  '/(auth)/signup': typeof authSignupLazyRoute
  '/(app)/': typeof appIndexLazyRoute
  '/(app)/p2p/$id': typeof appP2pIdLazyRoute
  '/(app)/p2p/': typeof appP2pIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/Auth'
    | '/about'
    | '/contact'
    | '/oneclickbuy'
    | '/services'
    | '/spot'
    | '/login'
    | '/signup'
    | '/p2p/$id'
    | '/p2p'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/Auth'
    | '/about'
    | '/contact'
    | '/oneclickbuy'
    | '/services'
    | '/spot'
    | '/login'
    | '/signup'
    | '/p2p/$id'
    | '/p2p'
  id:
    | '__root__'
    | '/(app)'
    | '/(auth)'
    | '/Auth'
    | '/Auth/_layout'
    | '/(app)/about'
    | '/(app)/contact'
    | '/(app)/oneclickbuy'
    | '/(app)/services'
    | '/(app)/spot'
    | '/(auth)/login'
    | '/(auth)/signup'
    | '/(app)/'
    | '/(app)/p2p/$id'
    | '/(app)/p2p/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  appRouteRoute: typeof appRouteRouteWithChildren
  authRouteRoute: typeof authRouteRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/Auth': {
      id: '/Auth'
      path: '/Auth'
      fullPath: '/Auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexLazyRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupLazyRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginLazyRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(app)/spot': {
      id: '/(app)/spot'
      path: '/spot'
      fullPath: '/spot'
      preLoaderRoute: typeof appSpotLazyRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/services': {
      id: '/(app)/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof appServicesLazyRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/oneclickbuy': {
      id: '/(app)/oneclickbuy'
      path: '/oneclickbuy'
      fullPath: '/oneclickbuy'
      preLoaderRoute: typeof appOneclickbuyLazyRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/contact': {
      id: '/(app)/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof appContactLazyRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/about': {
      id: '/(app)/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof appAboutLazyRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/Auth/_layout': {
      id: '/Auth/_layout'
      path: '/Auth'
      fullPath: '/Auth'
      preLoaderRoute: typeof AuthLayoutRouteImport
      parentRoute: typeof AuthRoute
    }
    '/(app)/p2p/': {
      id: '/(app)/p2p/'
      path: '/p2p'
      fullPath: '/p2p'
      preLoaderRoute: typeof appP2pIndexLazyRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/p2p/$id': {
      id: '/(app)/p2p/$id'
      path: '/p2p/$id'
      fullPath: '/p2p/$id'
      preLoaderRoute: typeof appP2pIdLazyRouteImport
      parentRoute: typeof appRouteRoute
    }
  }
}

interface appRouteRouteChildren {
  appAboutLazyRoute: typeof appAboutLazyRoute
  appContactLazyRoute: typeof appContactLazyRoute
  appOneclickbuyLazyRoute: typeof appOneclickbuyLazyRoute
  appServicesLazyRoute: typeof appServicesLazyRoute
  appSpotLazyRoute: typeof appSpotLazyRoute
  appIndexLazyRoute: typeof appIndexLazyRoute
  appP2pIdLazyRoute: typeof appP2pIdLazyRoute
  appP2pIndexLazyRoute: typeof appP2pIndexLazyRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  appAboutLazyRoute: appAboutLazyRoute,
  appContactLazyRoute: appContactLazyRoute,
  appOneclickbuyLazyRoute: appOneclickbuyLazyRoute,
  appServicesLazyRoute: appServicesLazyRoute,
  appSpotLazyRoute: appSpotLazyRoute,
  appIndexLazyRoute: appIndexLazyRoute,
  appP2pIdLazyRoute: appP2pIdLazyRoute,
  appP2pIndexLazyRoute: appP2pIndexLazyRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

interface authRouteRouteChildren {
  authLoginLazyRoute: typeof authLoginLazyRoute
  authSignupLazyRoute: typeof authSignupLazyRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginLazyRoute: authLoginLazyRoute,
  authSignupLazyRoute: authSignupLazyRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface AuthRouteChildren {
  AuthLayoutRoute: typeof AuthLayoutRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLayoutRoute: AuthLayoutRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  appRouteRoute: appRouteRouteWithChildren,
  authRouteRoute: authRouteRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
