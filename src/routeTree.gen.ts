/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as appRouteRouteImport } from './routes/(app)/route'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as DashboardWalletRouteImport } from './routes/dashboard/wallet'
import { Route as DashboardSecurityRouteImport } from './routes/dashboard/security'
import { Route as DashboardReportRouteImport } from './routes/dashboard/report'
import { Route as DashboardHistoryRouteImport } from './routes/dashboard/history'
import { Route as AuthLayoutRouteImport } from './routes/Auth/_layout'
import { Route as spotRouterRouteImport } from './routes/(spot)/router'
import { Route as appFutureRouteImport } from './routes/(app)/future'

const AuthRouteImport = createFileRoute('/Auth')()
const appIndexLazyRouteImport = createFileRoute('/(app)/')()
const spotSpotLazyRouteImport = createFileRoute('/(spot)/spot')()
const authSignupLazyRouteImport = createFileRoute('/(auth)/signup')()
const authLoginLazyRouteImport = createFileRoute('/(auth)/login')()
const appServicesLazyRouteImport = createFileRoute('/(app)/services')()
const appOptionLazyRouteImport = createFileRoute('/(app)/option')()
const appOneclickbuyLazyRouteImport = createFileRoute('/(app)/oneclickbuy')()
const appMarketLazyRouteImport = createFileRoute('/(app)/market')()
const appMarginLazyRouteImport = createFileRoute('/(app)/margin')()
const appFiatLazyRouteImport = createFileRoute('/(app)/fiat')()
const appContactLazyRouteImport = createFileRoute('/(app)/contact')()
const appAboutLazyRouteImport = createFileRoute('/(app)/about')()
const appP2pIndexLazyRouteImport = createFileRoute('/(app)/p2p/')()
const appP2pIdLazyRouteImport = createFileRoute('/(app)/p2p/$id')()

const AuthRoute = AuthRouteImport.update({
  id: '/Auth',
  path: '/Auth',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const appRouteRoute = appRouteRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const appIndexLazyRoute = appIndexLazyRouteImport
  .update({
    id: '/',
    path: '/',
    getParentRoute: () => appRouteRoute,
  } as any)
  .lazy(() => import('./routes/(app)/index.lazy').then((d) => d.Route))
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const spotSpotLazyRoute = spotSpotLazyRouteImport
  .update({
    id: '/(spot)/spot',
    path: '/spot',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() => import('./routes/(spot)/spot.lazy').then((d) => d.Route))
const authSignupLazyRoute = authSignupLazyRouteImport
  .update({
    id: '/signup',
    path: '/signup',
    getParentRoute: () => authRouteRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/signup.lazy').then((d) => d.Route))
const authLoginLazyRoute = authLoginLazyRouteImport
  .update({
    id: '/login',
    path: '/login',
    getParentRoute: () => authRouteRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/login.lazy').then((d) => d.Route))
const appServicesLazyRoute = appServicesLazyRouteImport
  .update({
    id: '/services',
    path: '/services',
    getParentRoute: () => appRouteRoute,
  } as any)
  .lazy(() => import('./routes/(app)/services.lazy').then((d) => d.Route))
const appOptionLazyRoute = appOptionLazyRouteImport
  .update({
    id: '/option',
    path: '/option',
    getParentRoute: () => appRouteRoute,
  } as any)
  .lazy(() => import('./routes/(app)/option.lazy').then((d) => d.Route))
const appOneclickbuyLazyRoute = appOneclickbuyLazyRouteImport
  .update({
    id: '/oneclickbuy',
    path: '/oneclickbuy',
    getParentRoute: () => appRouteRoute,
  } as any)
  .lazy(() => import('./routes/(app)/oneclickbuy.lazy').then((d) => d.Route))
const appMarketLazyRoute = appMarketLazyRouteImport
  .update({
    id: '/market',
    path: '/market',
    getParentRoute: () => appRouteRoute,
  } as any)
  .lazy(() => import('./routes/(app)/market.lazy').then((d) => d.Route))
const appMarginLazyRoute = appMarginLazyRouteImport
  .update({
    id: '/margin',
    path: '/margin',
    getParentRoute: () => appRouteRoute,
  } as any)
  .lazy(() => import('./routes/(app)/margin.lazy').then((d) => d.Route))
const appFiatLazyRoute = appFiatLazyRouteImport
  .update({
    id: '/fiat',
    path: '/fiat',
    getParentRoute: () => appRouteRoute,
  } as any)
  .lazy(() => import('./routes/(app)/fiat.lazy').then((d) => d.Route))
const appContactLazyRoute = appContactLazyRouteImport
  .update({
    id: '/contact',
    path: '/contact',
    getParentRoute: () => appRouteRoute,
  } as any)
  .lazy(() => import('./routes/(app)/contact.lazy').then((d) => d.Route))
const appAboutLazyRoute = appAboutLazyRouteImport
  .update({
    id: '/about',
    path: '/about',
    getParentRoute: () => appRouteRoute,
  } as any)
  .lazy(() => import('./routes/(app)/about.lazy').then((d) => d.Route))
const DashboardWalletRoute = DashboardWalletRouteImport.update({
  id: '/wallet',
  path: '/wallet',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardSecurityRoute = DashboardSecurityRouteImport.update({
  id: '/security',
  path: '/security',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardReportRoute = DashboardReportRouteImport.update({
  id: '/report',
  path: '/report',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardHistoryRoute = DashboardHistoryRouteImport.update({
  id: '/history',
  path: '/history',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const AuthLayoutRoute = AuthLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => AuthRoute,
} as any)
const spotRouterRoute = spotRouterRouteImport.update({
  id: '/(spot)/router',
  path: '/router',
  getParentRoute: () => rootRouteImport,
} as any)
const appFutureRoute = appFutureRouteImport.update({
  id: '/future',
  path: '/future',
  getParentRoute: () => appRouteRoute,
} as any)
const appP2pIndexLazyRoute = appP2pIndexLazyRouteImport
  .update({
    id: '/p2p/',
    path: '/p2p/',
    getParentRoute: () => appRouteRoute,
  } as any)
  .lazy(() => import('./routes/(app)/p2p/index.lazy').then((d) => d.Route))
const appP2pIdLazyRoute = appP2pIdLazyRouteImport
  .update({
    id: '/p2p/$id',
    path: '/p2p/$id',
    getParentRoute: () => appRouteRoute,
  } as any)
  .lazy(() => import('./routes/(app)/p2p/$id.lazy').then((d) => d.Route))

export interface FileRoutesByFullPath {
  '/': typeof appIndexLazyRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/future': typeof appFutureRoute
  '/router': typeof spotRouterRoute
  '/Auth': typeof AuthLayoutRoute
  '/dashboard/history': typeof DashboardHistoryRoute
  '/dashboard/report': typeof DashboardReportRoute
  '/dashboard/security': typeof DashboardSecurityRoute
  '/dashboard/wallet': typeof DashboardWalletRoute
  '/about': typeof appAboutLazyRoute
  '/contact': typeof appContactLazyRoute
  '/fiat': typeof appFiatLazyRoute
  '/margin': typeof appMarginLazyRoute
  '/market': typeof appMarketLazyRoute
  '/oneclickbuy': typeof appOneclickbuyLazyRoute
  '/option': typeof appOptionLazyRoute
  '/services': typeof appServicesLazyRoute
  '/login': typeof authLoginLazyRoute
  '/signup': typeof authSignupLazyRoute
  '/spot': typeof spotSpotLazyRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/p2p/$id': typeof appP2pIdLazyRoute
  '/p2p': typeof appP2pIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof appIndexLazyRoute
  '/future': typeof appFutureRoute
  '/router': typeof spotRouterRoute
  '/Auth': typeof AuthLayoutRoute
  '/dashboard/history': typeof DashboardHistoryRoute
  '/dashboard/report': typeof DashboardReportRoute
  '/dashboard/security': typeof DashboardSecurityRoute
  '/dashboard/wallet': typeof DashboardWalletRoute
  '/about': typeof appAboutLazyRoute
  '/contact': typeof appContactLazyRoute
  '/fiat': typeof appFiatLazyRoute
  '/margin': typeof appMarginLazyRoute
  '/market': typeof appMarketLazyRoute
  '/oneclickbuy': typeof appOneclickbuyLazyRoute
  '/option': typeof appOptionLazyRoute
  '/services': typeof appServicesLazyRoute
  '/login': typeof authLoginLazyRoute
  '/signup': typeof authSignupLazyRoute
  '/spot': typeof spotSpotLazyRoute
  '/dashboard': typeof DashboardIndexRoute
  '/p2p/$id': typeof appP2pIdLazyRoute
  '/p2p': typeof appP2pIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(app)': typeof appRouteRouteWithChildren
  '/(auth)': typeof authRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/(app)/future': typeof appFutureRoute
  '/(spot)/router': typeof spotRouterRoute
  '/Auth': typeof AuthRouteWithChildren
  '/Auth/_layout': typeof AuthLayoutRoute
  '/dashboard/history': typeof DashboardHistoryRoute
  '/dashboard/report': typeof DashboardReportRoute
  '/dashboard/security': typeof DashboardSecurityRoute
  '/dashboard/wallet': typeof DashboardWalletRoute
  '/(app)/about': typeof appAboutLazyRoute
  '/(app)/contact': typeof appContactLazyRoute
  '/(app)/fiat': typeof appFiatLazyRoute
  '/(app)/margin': typeof appMarginLazyRoute
  '/(app)/market': typeof appMarketLazyRoute
  '/(app)/oneclickbuy': typeof appOneclickbuyLazyRoute
  '/(app)/option': typeof appOptionLazyRoute
  '/(app)/services': typeof appServicesLazyRoute
  '/(auth)/login': typeof authLoginLazyRoute
  '/(auth)/signup': typeof authSignupLazyRoute
  '/(spot)/spot': typeof spotSpotLazyRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/(app)/': typeof appIndexLazyRoute
  '/(app)/p2p/$id': typeof appP2pIdLazyRoute
  '/(app)/p2p/': typeof appP2pIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/future'
    | '/router'
    | '/Auth'
    | '/dashboard/history'
    | '/dashboard/report'
    | '/dashboard/security'
    | '/dashboard/wallet'
    | '/about'
    | '/contact'
    | '/fiat'
    | '/margin'
    | '/market'
    | '/oneclickbuy'
    | '/option'
    | '/services'
    | '/login'
    | '/signup'
    | '/spot'
    | '/dashboard/'
    | '/p2p/$id'
    | '/p2p'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/future'
    | '/router'
    | '/Auth'
    | '/dashboard/history'
    | '/dashboard/report'
    | '/dashboard/security'
    | '/dashboard/wallet'
    | '/about'
    | '/contact'
    | '/fiat'
    | '/margin'
    | '/market'
    | '/oneclickbuy'
    | '/option'
    | '/services'
    | '/login'
    | '/signup'
    | '/spot'
    | '/dashboard'
    | '/p2p/$id'
    | '/p2p'
  id:
    | '__root__'
    | '/(app)'
    | '/(auth)'
    | '/dashboard'
    | '/(app)/future'
    | '/(spot)/router'
    | '/Auth'
    | '/Auth/_layout'
    | '/dashboard/history'
    | '/dashboard/report'
    | '/dashboard/security'
    | '/dashboard/wallet'
    | '/(app)/about'
    | '/(app)/contact'
    | '/(app)/fiat'
    | '/(app)/margin'
    | '/(app)/market'
    | '/(app)/oneclickbuy'
    | '/(app)/option'
    | '/(app)/services'
    | '/(auth)/login'
    | '/(auth)/signup'
    | '/(spot)/spot'
    | '/dashboard/'
    | '/(app)/'
    | '/(app)/p2p/$id'
    | '/(app)/p2p/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  appRouteRoute: typeof appRouteRouteWithChildren
  authRouteRoute: typeof authRouteRouteWithChildren
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  spotRouterRoute: typeof spotRouterRoute
  AuthRoute: typeof AuthRouteWithChildren
  spotSpotLazyRoute: typeof spotSpotLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/Auth': {
      id: '/Auth'
      path: '/Auth'
      fullPath: '/Auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexLazyRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/(spot)/spot': {
      id: '/(spot)/spot'
      path: '/spot'
      fullPath: '/spot'
      preLoaderRoute: typeof spotSpotLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupLazyRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginLazyRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(app)/services': {
      id: '/(app)/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof appServicesLazyRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/option': {
      id: '/(app)/option'
      path: '/option'
      fullPath: '/option'
      preLoaderRoute: typeof appOptionLazyRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/oneclickbuy': {
      id: '/(app)/oneclickbuy'
      path: '/oneclickbuy'
      fullPath: '/oneclickbuy'
      preLoaderRoute: typeof appOneclickbuyLazyRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/market': {
      id: '/(app)/market'
      path: '/market'
      fullPath: '/market'
      preLoaderRoute: typeof appMarketLazyRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/margin': {
      id: '/(app)/margin'
      path: '/margin'
      fullPath: '/margin'
      preLoaderRoute: typeof appMarginLazyRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/fiat': {
      id: '/(app)/fiat'
      path: '/fiat'
      fullPath: '/fiat'
      preLoaderRoute: typeof appFiatLazyRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/contact': {
      id: '/(app)/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof appContactLazyRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/about': {
      id: '/(app)/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof appAboutLazyRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/dashboard/wallet': {
      id: '/dashboard/wallet'
      path: '/wallet'
      fullPath: '/dashboard/wallet'
      preLoaderRoute: typeof DashboardWalletRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/security': {
      id: '/dashboard/security'
      path: '/security'
      fullPath: '/dashboard/security'
      preLoaderRoute: typeof DashboardSecurityRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/report': {
      id: '/dashboard/report'
      path: '/report'
      fullPath: '/dashboard/report'
      preLoaderRoute: typeof DashboardReportRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/history': {
      id: '/dashboard/history'
      path: '/history'
      fullPath: '/dashboard/history'
      preLoaderRoute: typeof DashboardHistoryRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/Auth/_layout': {
      id: '/Auth/_layout'
      path: '/Auth'
      fullPath: '/Auth'
      preLoaderRoute: typeof AuthLayoutRouteImport
      parentRoute: typeof AuthRoute
    }
    '/(spot)/router': {
      id: '/(spot)/router'
      path: '/router'
      fullPath: '/router'
      preLoaderRoute: typeof spotRouterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/future': {
      id: '/(app)/future'
      path: '/future'
      fullPath: '/future'
      preLoaderRoute: typeof appFutureRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/p2p/': {
      id: '/(app)/p2p/'
      path: '/p2p'
      fullPath: '/p2p'
      preLoaderRoute: typeof appP2pIndexLazyRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/p2p/$id': {
      id: '/(app)/p2p/$id'
      path: '/p2p/$id'
      fullPath: '/p2p/$id'
      preLoaderRoute: typeof appP2pIdLazyRouteImport
      parentRoute: typeof appRouteRoute
    }
  }
}

interface appRouteRouteChildren {
  appFutureRoute: typeof appFutureRoute
  appAboutLazyRoute: typeof appAboutLazyRoute
  appContactLazyRoute: typeof appContactLazyRoute
  appFiatLazyRoute: typeof appFiatLazyRoute
  appMarginLazyRoute: typeof appMarginLazyRoute
  appMarketLazyRoute: typeof appMarketLazyRoute
  appOneclickbuyLazyRoute: typeof appOneclickbuyLazyRoute
  appOptionLazyRoute: typeof appOptionLazyRoute
  appServicesLazyRoute: typeof appServicesLazyRoute
  appIndexLazyRoute: typeof appIndexLazyRoute
  appP2pIdLazyRoute: typeof appP2pIdLazyRoute
  appP2pIndexLazyRoute: typeof appP2pIndexLazyRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  appFutureRoute: appFutureRoute,
  appAboutLazyRoute: appAboutLazyRoute,
  appContactLazyRoute: appContactLazyRoute,
  appFiatLazyRoute: appFiatLazyRoute,
  appMarginLazyRoute: appMarginLazyRoute,
  appMarketLazyRoute: appMarketLazyRoute,
  appOneclickbuyLazyRoute: appOneclickbuyLazyRoute,
  appOptionLazyRoute: appOptionLazyRoute,
  appServicesLazyRoute: appServicesLazyRoute,
  appIndexLazyRoute: appIndexLazyRoute,
  appP2pIdLazyRoute: appP2pIdLazyRoute,
  appP2pIndexLazyRoute: appP2pIndexLazyRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

interface authRouteRouteChildren {
  authLoginLazyRoute: typeof authLoginLazyRoute
  authSignupLazyRoute: typeof authSignupLazyRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginLazyRoute: authLoginLazyRoute,
  authSignupLazyRoute: authSignupLazyRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface DashboardRouteRouteChildren {
  DashboardHistoryRoute: typeof DashboardHistoryRoute
  DashboardReportRoute: typeof DashboardReportRoute
  DashboardSecurityRoute: typeof DashboardSecurityRoute
  DashboardWalletRoute: typeof DashboardWalletRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardHistoryRoute: DashboardHistoryRoute,
  DashboardReportRoute: DashboardReportRoute,
  DashboardSecurityRoute: DashboardSecurityRoute,
  DashboardWalletRoute: DashboardWalletRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

interface AuthRouteChildren {
  AuthLayoutRoute: typeof AuthLayoutRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLayoutRoute: AuthLayoutRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  appRouteRoute: appRouteRouteWithChildren,
  authRouteRoute: authRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  spotRouterRoute: spotRouterRoute,
  AuthRoute: AuthRouteWithChildren,
  spotSpotLazyRoute: spotSpotLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
